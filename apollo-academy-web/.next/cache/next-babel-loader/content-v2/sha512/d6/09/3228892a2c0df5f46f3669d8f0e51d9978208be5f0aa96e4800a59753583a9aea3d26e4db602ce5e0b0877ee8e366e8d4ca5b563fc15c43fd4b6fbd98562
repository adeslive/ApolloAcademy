{"ast":null,"code":"import { cacheExchange } from '@urql/exchange-graphcache';\nimport { dedupExchange, fetchExchange } from \"urql\";\nimport { VerifyLoginDocument } from \"../generated/graphql\";\nimport { updateQuery } from './updateQuery';\nexport const urqlClient = ssrExchange => ({\n  url: \"http://localhost:8080/graphql\",\n  fetchOptions: {\n    credentials: \"include\"\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    updates: {\n      Mutation: {\n        logout: (_result, args, cache, info) => {\n          updateQuery(cache, {\n            query: VerifyLoginDocument\n          }, _result, () => ({\n            verifyLogin: null\n          }));\n        },\n        register: (_result, args, cache, info) => {\n          updateQuery(cache, {\n            query: VerifyLoginDocument\n          }, _result, (result, query) => {\n            if (result.register.errors) {\n              return query;\n            } else {\n              return {\n                verifyLogin: result.register.user\n              };\n            }\n          });\n        },\n        login: (_result, args, cache, info) => {\n          updateQuery(cache, {\n            query: VerifyLoginDocument\n          }, _result, (result, query) => {\n            if (result.login.errors) {\n              return query;\n            } else {\n              return {\n                verifyLogin: result.login.user\n              };\n            }\n          });\n        }\n      }\n    }\n  }), ssrExchange, fetchExchange]\n});","map":{"version":3,"sources":["C:/Users/Usuario/Documents/Proyectos/apollo-academy/apollo-academy-web/utils/urqlClient.ts"],"names":["cacheExchange","dedupExchange","fetchExchange","VerifyLoginDocument","updateQuery","urqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","updates","Mutation","logout","_result","args","cache","info","query","verifyLogin","register","result","errors","user","login"],"mappings":"AAAA,SAASA,aAAT,QAA8B,2BAA9B;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,MAA7C;AACA,SAA4DC,mBAA5D,QAAyG,sBAAzG;AACA,SAASC,WAAT,QAA4B,eAA5B;AAEA,OAAO,MAAMC,UAAU,GAAIC,WAAD,KAAuB;AAC7CC,EAAAA,GAAG,EAAE,+BADwC;AAE7CC,EAAAA,YAAY,EAAE;AACVC,IAAAA,WAAW,EAAE;AADH,GAF+B;AAK7CC,EAAAA,SAAS,EAAE,CAACT,aAAD,EAAgBD,aAAa,CAAC;AACrCW,IAAAA,OAAO,EAAE;AACLC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,MAAM,EAAE,CAACC,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,KAAgC;AACpCb,UAAAA,WAAW,CACPY,KADO,EAEP;AAAEE,YAAAA,KAAK,EAAEf;AAAT,WAFO,EAGPW,OAHO,EAIP,OAAO;AAAEK,YAAAA,WAAW,EAAE;AAAf,WAAP,CAJO,CAAX;AAMH,SARK;AASNC,QAAAA,QAAQ,EAAE,CAACN,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,KAAgC;AACtCb,UAAAA,WAAW,CACPY,KADO,EAEP;AAAEE,YAAAA,KAAK,EAAEf;AAAT,WAFO,EAGPW,OAHO,EAIP,CAACO,MAAD,EAASH,KAAT,KAAmB;AACf,gBAAIG,MAAM,CAACD,QAAP,CAAgBE,MAApB,EAA4B;AACxB,qBAAOJ,KAAP;AACH,aAFD,MAEO;AACH,qBAAO;AACHC,gBAAAA,WAAW,EAAEE,MAAM,CAACD,QAAP,CAAgBG;AAD1B,eAAP;AAGH;AACJ,WAZM,CAAX;AAcH,SAxBK;AAyBNC,QAAAA,KAAK,EAAE,CAACV,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,KAAgC;AACnCb,UAAAA,WAAW,CACPY,KADO,EAEP;AAAEE,YAAAA,KAAK,EAAEf;AAAT,WAFO,EAGPW,OAHO,EAIP,CAACO,MAAD,EAASH,KAAT,KAAmB;AACf,gBAAIG,MAAM,CAACG,KAAP,CAAaF,MAAjB,EAAyB;AACrB,qBAAOJ,KAAP;AACH,aAFD,MAEO;AACH,qBAAO;AACHC,gBAAAA,WAAW,EAAEE,MAAM,CAACG,KAAP,CAAaD;AADvB,eAAP;AAGH;AACJ,WAZM,CAAX;AAcH;AAxCK;AADL;AAD4B,GAAD,CAA7B,EA8CXjB,WA9CW,EA+CXJ,aA/CW;AALkC,CAAvB,CAAnB","sourcesContent":["import { cacheExchange } from '@urql/exchange-graphcache';\r\nimport { dedupExchange, fetchExchange } from \"urql\";\r\nimport { LoginMutation, RegisterDocument, RegisterMutation, VerifyLoginDocument, VerifyLoginQuery } from \"../generated/graphql\";\r\nimport { updateQuery } from './updateQuery';\r\n\r\nexport const urqlClient = (ssrExchange: any) => ({\r\n    url: \"http://localhost:8080/graphql\",\r\n    fetchOptions: {\r\n        credentials: \"include\" as const\r\n    },\r\n    exchanges: [dedupExchange, cacheExchange({\r\n        updates: {\r\n            Mutation: {\r\n                logout: (_result, args, cache, info) => {\r\n                    updateQuery<LoginMutation, VerifyLoginQuery>(\r\n                        cache,\r\n                        { query: VerifyLoginDocument },\r\n                        _result,\r\n                        () => ({ verifyLogin: null })\r\n                    )\r\n                },\r\n                register: (_result, args, cache, info) => {\r\n                    updateQuery<RegisterMutation, VerifyLoginQuery>(\r\n                        cache,\r\n                        { query: VerifyLoginDocument },\r\n                        _result,\r\n                        (result, query) => {\r\n                            if (result.register.errors) {\r\n                                return query;\r\n                            } else {\r\n                                return {\r\n                                    verifyLogin: result.register.user\r\n                                }\r\n                            }\r\n                        }\r\n                    )\r\n                },\r\n                login: (_result, args, cache, info) => {\r\n                    updateQuery<LoginMutation, VerifyLoginQuery>(\r\n                        cache,\r\n                        { query: VerifyLoginDocument },\r\n                        _result,\r\n                        (result, query) => {\r\n                            if (result.login.errors) {\r\n                                return query;\r\n                            } else {\r\n                                return {\r\n                                    verifyLogin: result.login.user\r\n                                }\r\n                            }\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }),\r\n    ssrExchange, \r\n    fetchExchange]\r\n})\r\n\r\n"]},"metadata":{},"sourceType":"module"}