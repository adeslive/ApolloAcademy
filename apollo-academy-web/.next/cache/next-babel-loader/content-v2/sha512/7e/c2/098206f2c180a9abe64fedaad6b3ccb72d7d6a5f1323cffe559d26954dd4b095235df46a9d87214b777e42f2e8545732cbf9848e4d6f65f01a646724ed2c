{"ast":null,"code":"import { cacheExchange } from '@urql/exchange-graphcache';\nimport { dedupExchange, fetchExchange } from \"urql\";\nimport { VerifyLoginDocument } from \"../generated/graphql\";\nimport { updateQuery } from './updateQuery';\nexport var urqlClient = function urqlClient(ssrExchange) {\n  return {\n    url: \"http://localhost:8080/graphql\",\n    fetchOptions: {\n      credentials: \"include\"\n    },\n    exchanges: [dedupExchange, cacheExchange({\n      updates: {\n        Mutation: {\n          logout: function logout(_result, args, cache, info) {\n            updateQuery(cache, {\n              query: VerifyLoginDocument\n            }, _result, function () {\n              return {\n                verifyLogin: null\n              };\n            });\n          },\n          register: function register(_result, args, cache, info) {\n            updateQuery(cache, {\n              query: VerifyLoginDocument\n            }, _result, function (result, query) {\n              if (result.register.errors) {\n                return query;\n              } else {\n                return {\n                  verifyLogin: result.register.user\n                };\n              }\n            });\n          },\n          login: function login(_result, args, cache, info) {\n            updateQuery(cache, {\n              query: VerifyLoginDocument\n            }, _result, function (result, query) {\n              if (result.login.errors) {\n                return query;\n              } else {\n                return {\n                  verifyLogin: result.login.user\n                };\n              }\n            });\n          }\n        }\n      }\n    }), ssrExchange, fetchExchange]\n  };\n};","map":{"version":3,"sources":["C:/Users/Usuario/Documents/Proyectos/apollo-academy/apollo-academy-web/utils/urqlClient.ts"],"names":["cacheExchange","dedupExchange","fetchExchange","VerifyLoginDocument","updateQuery","urqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","updates","Mutation","logout","_result","args","cache","info","query","verifyLogin","register","result","errors","user","login"],"mappings":"AAAA,SAASA,aAAT,QAA8B,2BAA9B;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,MAA7C;AACA,SAA4DC,mBAA5D,QAAyG,sBAAzG;AACA,SAASC,WAAT,QAA4B,eAA5B;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,WAAD;AAAA,SAAuB;AAC7CC,IAAAA,GAAG,EAAE,+BADwC;AAE7CC,IAAAA,YAAY,EAAE;AACVC,MAAAA,WAAW,EAAE;AADH,KAF+B;AAK7CC,IAAAA,SAAS,EAAE,CAACT,aAAD,EAAgBD,aAAa,CAAC;AACrCW,MAAAA,OAAO,EAAE;AACLC,QAAAA,QAAQ,EAAE;AACNC,UAAAA,MAAM,EAAE,gBAACC,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,EAAgC;AACpCb,YAAAA,WAAW,CACPY,KADO,EAEP;AAAEE,cAAAA,KAAK,EAAEf;AAAT,aAFO,EAGPW,OAHO,EAIP;AAAA,qBAAO;AAAEK,gBAAAA,WAAW,EAAE;AAAf,eAAP;AAAA,aAJO,CAAX;AAMH,WARK;AASNC,UAAAA,QAAQ,EAAE,kBAACN,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,EAAgC;AACtCb,YAAAA,WAAW,CACPY,KADO,EAEP;AAAEE,cAAAA,KAAK,EAAEf;AAAT,aAFO,EAGPW,OAHO,EAIP,UAACO,MAAD,EAASH,KAAT,EAAmB;AACf,kBAAIG,MAAM,CAACD,QAAP,CAAgBE,MAApB,EAA4B;AACxB,uBAAOJ,KAAP;AACH,eAFD,MAEO;AACH,uBAAO;AACHC,kBAAAA,WAAW,EAAEE,MAAM,CAACD,QAAP,CAAgBG;AAD1B,iBAAP;AAGH;AACJ,aAZM,CAAX;AAcH,WAxBK;AAyBNC,UAAAA,KAAK,EAAE,eAACV,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,EAAgC;AACnCb,YAAAA,WAAW,CACPY,KADO,EAEP;AAAEE,cAAAA,KAAK,EAAEf;AAAT,aAFO,EAGPW,OAHO,EAIP,UAACO,MAAD,EAASH,KAAT,EAAmB;AACf,kBAAIG,MAAM,CAACG,KAAP,CAAaF,MAAjB,EAAyB;AACrB,uBAAOJ,KAAP;AACH,eAFD,MAEO;AACH,uBAAO;AACHC,kBAAAA,WAAW,EAAEE,MAAM,CAACG,KAAP,CAAaD;AADvB,iBAAP;AAGH;AACJ,aAZM,CAAX;AAcH;AAxCK;AADL;AAD4B,KAAD,CAA7B,EA8CXjB,WA9CW,EA+CXJ,aA/CW;AALkC,GAAvB;AAAA,CAAnB","sourcesContent":["import { cacheExchange } from '@urql/exchange-graphcache';\r\nimport { dedupExchange, fetchExchange } from \"urql\";\r\nimport { LoginMutation, RegisterDocument, RegisterMutation, VerifyLoginDocument, VerifyLoginQuery } from \"../generated/graphql\";\r\nimport { updateQuery } from './updateQuery';\r\n\r\nexport const urqlClient = (ssrExchange: any) => ({\r\n    url: \"http://localhost:8080/graphql\",\r\n    fetchOptions: {\r\n        credentials: \"include\" as const\r\n    },\r\n    exchanges: [dedupExchange, cacheExchange({\r\n        updates: {\r\n            Mutation: {\r\n                logout: (_result, args, cache, info) => {\r\n                    updateQuery<LoginMutation, VerifyLoginQuery>(\r\n                        cache,\r\n                        { query: VerifyLoginDocument },\r\n                        _result,\r\n                        () => ({ verifyLogin: null })\r\n                    )\r\n                },\r\n                register: (_result, args, cache, info) => {\r\n                    updateQuery<RegisterMutation, VerifyLoginQuery>(\r\n                        cache,\r\n                        { query: VerifyLoginDocument },\r\n                        _result,\r\n                        (result, query) => {\r\n                            if (result.register.errors) {\r\n                                return query;\r\n                            } else {\r\n                                return {\r\n                                    verifyLogin: result.register.user\r\n                                }\r\n                            }\r\n                        }\r\n                    )\r\n                },\r\n                login: (_result, args, cache, info) => {\r\n                    updateQuery<LoginMutation, VerifyLoginQuery>(\r\n                        cache,\r\n                        { query: VerifyLoginDocument },\r\n                        _result,\r\n                        (result, query) => {\r\n                            if (result.login.errors) {\r\n                                return query;\r\n                            } else {\r\n                                return {\r\n                                    verifyLogin: result.login.user\r\n                                }\r\n                            }\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }),\r\n    ssrExchange, \r\n    fetchExchange]\r\n})\r\n\r\n"]},"metadata":{},"sourceType":"module"}