{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport const RegularUserFragmentDoc = gql`\n    fragment RegularUser on User {\n  id\n  name\n  email\n}\n    `;\nexport const RegularClassroomFragmentDoc = gql`\n    fragment RegularClassroom on VirtualClassroom {\n  id\n  teacher {\n    id\n    user {\n      ...RegularUser\n    }\n  }\n  capacity\n  link\n  createdAt\n  updatedAt\n  enable\n}\n    ${RegularUserFragmentDoc}`;\nexport const RegularCourseFragmentDoc = gql`\n    fragment RegularCourse on Course {\n  id\n  name\n  price\n  language {\n    id\n    name\n    code\n  }\n}\n    `;\nexport const GetActivitiesDocument = gql`\n    mutation GetActivities($date: DateTime!) {\n  activities(date: $date) {\n    id\n    link\n    description\n    capacity\n    time_start\n    course {\n      id\n      name\n    }\n  }\n}\n    `;\nexport function useGetActivitiesMutation() {\n  return Urql.useMutation(GetActivitiesDocument);\n}\n;\nexport const ChangeClassRoomStateDocument = gql`\n    mutation changeClassRoomState($id: ID!, $state: Boolean!) {\n  changeClassRoomState(id: $id, newState: $state)\n}\n    `;\nexport function useChangeClassRoomStateMutation() {\n  return Urql.useMutation(ChangeClassRoomStateDocument);\n}\n;\nexport const ChangeCourseStateDocument = gql`\n    mutation changeCourseState($id: ID!, $state: Boolean!) {\n  changeCourseState(id: $id, newState: $state)\n}\n    `;\nexport function useChangeCourseStateMutation() {\n  return Urql.useMutation(ChangeCourseStateDocument);\n}\n;\nexport const ChangePasswordDocument = gql`\n    mutation changePassword($password: String!, $email: String!) {\n  changePassword(password: $password, email: $email) {\n    errors {\n      field\n      message\n    }\n    user {\n      ...RegularUser\n    }\n  }\n}\n    ${RegularUserFragmentDoc}`;\nexport function useChangePasswordMutation() {\n  return Urql.useMutation(ChangePasswordDocument);\n}\n;\nexport const CreateCheckoutSessionDocument = gql`\n    mutation createCheckoutSession($id: ID!) {\n  createCheckout(classroom: $id) {\n    errors {\n      field\n      message\n    }\n    stripeID\n  }\n}\n    `;\nexport function useCreateCheckoutSessionMutation() {\n  return Urql.useMutation(CreateCheckoutSessionDocument);\n}\n;\nexport const GetcodeDocument = gql`\n    mutation getcode($email: String!) {\n  getCode(email: $email) {\n    errors {\n      field\n      message\n    }\n    user {\n      ...RegularUser\n    }\n  }\n}\n    ${RegularUserFragmentDoc}`;\nexport function useGetcodeMutation() {\n  return Urql.useMutation(GetcodeDocument);\n}\n;\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(password: $password, email: $email) {\n    errors {\n      field\n      message\n    }\n    user {\n      ...RegularUser\n    }\n  }\n}\n    ${RegularUserFragmentDoc}`;\nexport function useLoginMutation() {\n  return Urql.useMutation(LoginDocument);\n}\n;\nexport const LogoutDocument = gql`\n    mutation logout {\n  logout\n}\n    `;\nexport function useLogoutMutation() {\n  return Urql.useMutation(LogoutDocument);\n}\n;\nexport const PayDocument = gql`\n    mutation pay($id: ID!, $key: String!) {\n  pay(classroom: $id, key: $key) {\n    errors {\n      field\n      message\n    }\n    receipt {\n      id\n      amount\n    }\n  }\n}\n    `;\nexport function usePayMutation() {\n  return Urql.useMutation(PayDocument);\n}\n;\nexport const ReceiptDocument = gql`\n    mutation Receipt($id: ID!) {\n  receipt(id: $id) {\n    id\n    paid\n    amount\n    createdAt\n    virtual {\n      id\n      description\n      capacity\n      enable\n      teacher {\n        id\n        user {\n          id\n          name\n          email\n        }\n      }\n      course {\n        id\n        name\n        createdAt\n        updatedAt\n        language {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n    `;\nexport function useReceiptMutation() {\n  return Urql.useMutation(ReceiptDocument);\n}\n;\nexport const RegisterDocument = gql`\n    mutation Register($name: String!, $email: String!, $password: String!) {\n  register(name: $name, email: $email, password: $password) {\n    errors {\n      field\n      message\n    }\n    user {\n      ...RegularUser\n    }\n  }\n}\n    ${RegularUserFragmentDoc}`;\nexport function useRegisterMutation() {\n  return Urql.useMutation(RegisterDocument);\n}\n;\nexport const RestoreDocument = gql`\n    mutation restore($code: String!, $email: String!) {\n  restore(code: $code, email: $email) {\n    errors {\n      field\n      message\n    }\n    user {\n      ...RegularUser\n    }\n  }\n}\n    ${RegularUserFragmentDoc}`;\nexport function useRestoreMutation() {\n  return Urql.useMutation(RestoreDocument);\n}\n;\nexport const GetClassroomDatesDocument = gql`\n    query GetClassroomDates {\n  classroomdates\n}\n    `;\nexport function useGetClassroomDatesQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetClassroomDatesDocument\n  }, options));\n}\n;\nexport const GetClassroomDocument = gql`\n    query getClassroom($id: ID!) {\n  classroom(id: $id) {\n    id\n    link\n    description\n    capacity\n    createdAt\n    updatedAt\n    enable\n    course {\n      id\n      name\n      price\n      language {\n        id\n        name\n        code\n      }\n    }\n    teacher {\n      id\n      user {\n        ...RegularUser\n      }\n    }\n  }\n}\n    ${RegularUserFragmentDoc}`;\nexport function useGetClassroomQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetClassroomDocument\n  }, options));\n}\n;\nexport const GetClassroomsByCourseDocument = gql`\n    query getClassroomsByCourse($id: ID!) {\n  classroomsByCourse(id: $id) {\n    id\n    description\n    capacity\n    link\n    createdAt\n    updatedAt\n    enable\n    course {\n      ...RegularCourse\n    }\n    teacher {\n      id\n      user {\n        ...RegularUser\n      }\n    }\n  }\n}\n    ${RegularCourseFragmentDoc}\n${RegularUserFragmentDoc}`;\nexport function useGetClassroomsByCourseQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetClassroomsByCourseDocument\n  }, options));\n}\n;\nexport const GetClassroomsDocument = gql`\n    query getClassrooms {\n  classrooms {\n    id\n    link\n    description\n    capacity\n    time_start\n    createdAt\n    updatedAt\n    enable\n    course {\n      id\n      name\n      price\n      language {\n        id\n        name\n        code\n      }\n    }\n    teacher {\n      id\n      user {\n        ...RegularUser\n      }\n    }\n  }\n}\n    ${RegularUserFragmentDoc}`;\nexport function useGetClassroomsQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetClassroomsDocument\n  }, options));\n}\n;\nexport const GetCoursesDocument = gql`\n    query getCourses {\n  courses {\n    id\n    name\n    price\n    active\n    createdAt\n    updatedAt\n    language {\n      id\n      name\n      code\n    }\n    classrooms {\n      id\n      description\n      teacher {\n        id\n        user {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n    `;\nexport function useGetCoursesQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetCoursesDocument\n  }, options));\n}\n;\nexport const GetTeacherDocument = gql`\n    query getTeacher($id: ID!) {\n  teacher(id: $id) {\n    user {\n      id\n      name\n      email\n    }\n    classrooms {\n      id\n      link\n      description\n      capacity\n      course {\n        id\n        name\n        price\n        language {\n          id\n          name\n          code\n        }\n      }\n    }\n  }\n}\n    `;\nexport function useGetTeacherQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetTeacherDocument\n  }, options));\n}\n;\nexport const GetUserDocument = gql`\n    query getUser($id: ID!) {\n  user(id: $id) {\n    ...RegularUser\n  }\n}\n    ${RegularUserFragmentDoc}`;\nexport function useGetUserQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetUserDocument\n  }, options));\n}\n;\nexport const IsPaidDocument = gql`\n    query isPaid($id: ID!) {\n  isPaid(id: $id)\n}\n    `;\nexport function useIsPaidQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: IsPaidDocument\n  }, options));\n}\n;\nexport const MyCoursesDocument = gql`\n    query myCourses {\n  mycourses {\n    id\n    name\n    price\n    language {\n      id\n      name\n      code\n    }\n    classrooms {\n      id\n      link\n      description\n      capacity\n      teacher {\n        id\n        user {\n          id\n          name\n          email\n        }\n      }\n    }\n  }\n}\n    `;\nexport function useMyCoursesQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: MyCoursesDocument\n  }, options));\n}\n;\nexport const MyReceiptsDocument = gql`\n    query myReceipts {\n  myreceipts {\n    id\n    paid\n    amount\n    createdAt\n  }\n}\n    `;\nexport function useMyReceiptsQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: MyReceiptsDocument\n  }, options));\n}\n;\nexport const VerifyLoginDocument = gql`\n    query VerifyLogin {\n  verifyLogin {\n    ...RegularUser\n  }\n}\n    ${RegularUserFragmentDoc}`;\nexport function useVerifyLoginQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: VerifyLoginDocument\n  }, options));\n}\n;","map":null,"metadata":{},"sourceType":"module"}